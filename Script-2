-- Creating the Sanity Frame
-- This script extracts the Sanity frame from the given script and manages its behavior

-- Creating the ScreenGui for the Sanity Frame
local sanityScreenGui = Instance.new("ScreenGui")
sanityScreenGui.Name = "SanityScreenGui"
sanityScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Creating the Sanity Check Frame
local sanityFrame = Instance.new("Frame")
sanityFrame.Name = "SanityFrame"
sanityFrame.Parent = sanityScreenGui
sanityFrame.AnchorPoint = Vector2.new(0.5, 0.5)
sanityFrame.Position = UDim2.new(0.5, 0, 0, 70) -- Positioned in the middle of the screen, slightly down
sanityFrame.Size = UDim2.new(0, 200, 0, 50)
sanityFrame.BackgroundTransparency = 1 -- Reduced transparency to make it more visible
sanityFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Added background color for visibility
sanityFrame.BorderSizePixel = 0

-- Adding Sanity Text
local sanityLabel = Instance.new("TextLabel")
sanityLabel.Parent = sanityFrame
sanityLabel.Size = UDim2.new(1, 0, 1, 0)
sanityLabel.BackgroundTransparency = 1
sanityLabel.Font = Enum.Font.SourceSansBold
sanityLabel.TextSize = 17
sanityLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- Default to white
sanityLabel.Text = "Sanity: Loading..."
sanityLabel.TextStrokeTransparency = 1 -- No outline

-- Function to update Sanity Text continuously
local player = game:GetService("Players").LocalPlayer
local sanity = player:WaitForChild("Sanity", 5)
if sanity then
    sanity:GetPropertyChangedSignal("Value"):Connect(function()
        local sanityValue = sanity.Value
        sanityLabel.Text = "Sanity: " .. sanityValue .. "%"

        -- Change text color based on sanity value
        if sanityValue >= 100 then
            sanityLabel.TextColor3 = Color3.new(1, 1, 1) -- White
        elseif sanityValue >= 50 then
            sanityLabel.TextColor3 = Color3.fromRGB(255, 165, 0) -- Orange
        elseif sanityValue >= 10 then
            sanityLabel.TextColor3 = Color3.fromRGB(255, 0, 0) -- Red
        else
            sanityLabel.TextColor3 = Color3.fromRGB(255, 0, 0) -- Red for values below 10%
        end
    end)
else
    sanityLabel.Text = "Sanity: N/A"
end

-- Detecting "No Sanity" challenge and updating text with animation
local function detectNoSanityChallenge()
    local path = workspace:WaitForChild("Map"):WaitForChild("Van"):WaitForChild("Van"):WaitForChild("TimerModel"):WaitForChild("Monitor"):WaitForChild("SurfaceGui"):FindFirstChild("Challenges")
    if path and path:FindFirstChild("No Sanity") then
        -- Animate fade in for the text label
        sanityLabel.Text = "No Sanity Challenges"
        sanityLabel.TextColor3 = Color3.fromRGB(255, 0, 0) -- Red text
        for i = 0, 1, 0.05 do
            sanityLabel.TextTransparency = 1 - i
            wait(0.05)
        end

        -- Wait for 10 seconds
        wait(1)

        -- Animate fade out for the text label
        for i = 0, 1, 0.05 do
            sanityLabel.TextTransparency = i
            wait(0.05)
        end

        -- Remove the text
        sanityLabel.Text = ""
    end
end

-- Run the detection function
detectNoSanityChallenge()

-- end







-- Create a new ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TimerDisplayGui"
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create a TextLabel to display the timer
local timerLabel = Instance.new("TextLabel")
timerLabel.Name = "TimerLabel"
timerLabel.Parent = screenGui
timerLabel.Size = UDim2.new(0, 150, 0, 40) -- Smaller size (150x40 pixels)
timerLabel.Position = UDim2.new(0, 10, 1, -60) -- Position in the bottom-right corner
timerLabel.BackgroundTransparency = 1 -- Fully transparent background
timerLabel.TextColor3 = Color3.new(1, 1, 1) -- White text
timerLabel.Font = Enum.Font.SourceSansBold
timerLabel.TextScaled = true
timerLabel.Text = "00:00" -- Initial text

-- Define the path to the Timer TextLabel
local timerTextPath = workspace:WaitForChild("Map"):WaitForChild("Van"):WaitForChild("Van")
                        :WaitForChild("TimerModel"):WaitForChild("Monitor")
                        :WaitForChild("SurfaceGui"):WaitForChild("Timer")

-- Function to update the time on the screen
local function updateTime()
    while true do
        if timerTextPath and timerTextPath:IsA("TextLabel") then
            timerLabel.Text = timerTextPath.Text -- Update the ScreenGui label text with the timer's text
        else
            warn("Timer TextLabel not found or is not a TextLabel instance")
        end
        wait(1) -- Wait for 1 second before updating again
    end
end

-- Start the time update loop without blocking the script
spawn(updateTime)

-- End








-- Create a ScreenGui for the button
local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local buttonGui = Instance.new("ScreenGui")
buttonGui.Name = "DeleteDoorsButtonGui"
buttonGui.Parent = playerGui
buttonGui.ResetOnSpawn = false

-- Create the delete button
local deleteButton = Instance.new("TextButton")
deleteButton.Name = "DeleteDoorsButton"
deleteButton.Parent = buttonGui
deleteButton.Size = UDim2.new(0, 80, 0, 40) -- Button size (80x40 pixels)
deleteButton.Position = UDim2.new(1, -370, 0, 80) -- Positioned below the specified position
deleteButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black background color
deleteButton.BackgroundTransparency = 0.8 -- Set transparency
deleteButton.Text = "DELETE"
deleteButton.TextColor3 = Color3.new(1, 0, 0) -- Red text color
deleteButton.Font = Enum.Font.SourceSansBold
deleteButton.TextScaled = true

-- Add UICorner to the delete button for rounded edges
local cornerDelete = Instance.new("UICorner")
cornerDelete.Parent = deleteButton

-- Function to animate the button text with fade in and fade out effects
local function animateButtonText()
    local texts = {"DELETE", "DOORS"}
    local currentTextIndex = 1
    while deleteButton.Parent do
        deleteButton.Text = texts[currentTextIndex]
        
        -- Fade in
        for i = 0, 1, 0.05 do
            deleteButton.TextTransparency = 1 - i
            wait(0.05)
        end
        
        wait(0.8) -- Wait for 2 seconds
        
        -- Fade out
        for i = 0, 1, 0.05 do
            deleteButton.TextTransparency = i
            wait(0.05)
        end
        
        wait(0.1)
        
        -- Switch to the next text
        currentTextIndex = currentTextIndex % #texts + 1
    end
end

-- Function to delete all parts named "Doors"
local function deleteDoors()
    for _, part in pairs(workspace:GetDescendants()) do
        if part.Name:lower() == "doors" then
            part:Destroy()
        end
    end
    print("All parts named 'Doors' have been deleted.")
    
    -- Destroy the button after it is pressed
    deleteButton:Destroy()
end

-- Start the text animation
spawn(animateButtonText)

-- Connect the button click to deleteDoors function
deleteButton.MouseButton1Click:Connect(deleteDoors)
